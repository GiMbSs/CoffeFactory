# Generated by Django 5.2.5 on 2025-09-01 14:10

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(help_text='Email address for login and communication', max_length=254, unique=True)),
                ('phone', models.CharField(blank=True, help_text='Contact phone number', max_length=15, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('is_employee', models.BooleanField(default=False, help_text='Whether this user is an employee')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'auth_user',
                'ordering': ['-created_at'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this record is active')),
                ('employee_id', models.CharField(help_text='Employee identification number', max_length=20, unique=True)),
                ('department', models.CharField(choices=[('production', 'Produção'), ('sales', 'Vendas'), ('admin', 'Administração'), ('quality', 'Controle de Qualidade'), ('maintenance', 'Manutenção'), ('warehouse', 'Estoque')], help_text='Department where the employee works', max_length=20)),
                ('position', models.CharField(help_text='Job position/title', max_length=100)),
                ('employment_type', models.CharField(choices=[('full_time', 'Tempo Integral'), ('part_time', 'Meio Período'), ('contract', 'Contrato'), ('intern', 'Estágio')], default='full_time', help_text='Type of employment', max_length=20)),
                ('hire_date', models.DateField(help_text='Date when the employee was hired')),
                ('salary', models.DecimalField(decimal_places=2, help_text='Monthly salary in Brazilian Real', max_digits=10)),
                ('address', models.TextField(blank=True, help_text='Employee address')),
                ('emergency_contact', models.CharField(blank=True, help_text='Emergency contact person', max_length=100)),
                ('emergency_phone', models.CharField(blank=True, help_text='Emergency contact phone', max_length=15)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the employee')),
                ('user', models.OneToOneField(help_text='Associated user account', on_delete=django.db.models.deletion.CASCADE, related_name='employee_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Employee',
                'verbose_name_plural': 'Employees',
                'ordering': ['employee_id'],
            },
        ),
    ]
